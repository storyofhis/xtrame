// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: accounts.sql

package db

import (
	"context"
)

const createAccounts = `-- name: CreateAccounts :one
INSERT INTO accounts (
    fullname, 
    nickname, 
    username,
    email,
    password,
    role,
    age
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6, 
    $7
) RETURNING id, fullname, nickname, username, email, password, role, age, created_at, updated_at
`

type CreateAccountsParams struct {
	Fullname string      `json:"fullname"`
	Nickname string      `json:"nickname"`
	Username string      `json:"username"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Role     interface{} `json:"role"`
	Age      int32       `json:"age"`
}

func (q *Queries) CreateAccounts(ctx context.Context, arg CreateAccountsParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccounts,
		arg.Fullname,
		arg.Nickname,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.Age,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Nickname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, fullname, nickname, username, email, password, role, age, created_at, updated_at FROM accounts 
WHERE email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Nickname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, fullname, nickname, username, email, password, role, age, created_at, updated_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUserByID(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Nickname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, fullname, nickname, username, email, password, role, age, created_at, updated_at FROM accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Nickname,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.Age,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
